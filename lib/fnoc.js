// Generated by CoffeeScript 1.3.3
(function() {
  var dir, dirs, fnoc, fs, jsonFiles, jsonObj, key, newDir, p, path, paths, stat, _i, _j, _len, _len1;

  path = require('path');

  fs = require('fs-extra');

  if (global.__fnoc != null) {
    module.exports = global.__fnoc;
  } else {
    dirs = ['./', './config', './conf'];
    jsonFiles = [];
    fnoc = global.__fnoc = {};
    for (_i = 0, _len = dirs.length; _i < _len; _i++) {
      dir = dirs[_i];
      newDir = path.join(process.cwd(), dir);
      if (fs.existsSync(dir)) {
        paths = fs.readdirSync(newDir);
        for (_j = 0, _len1 = paths.length; _j < _len1; _j++) {
          p = paths[_j];
          if (p === 'env.json') {
            console.log("Can't have config file named 'env.json'");
          } else {
            p = path.join(newDir, p);
            stat = fs.lstatSync(p);
            if (path.extname(p) === '.json' && stat.isFile()) {
              jsonObj = null;
              try {
                jsonObj = JSON.parse(fs.readFileSync(p));
              } catch (error) {
                console.log(error);
                console.log("fnoc: JSON parse error on file " + p);
              }
              key = path.basename(p, '.json');
              fnoc[key] = jsonObj;
            }
          }
        }
      }
    }
    fnoc.env = function() {
      var currentEnv, env, obj, packageName;
      if (global.__fnocEnv != null) {
        return global.__fnocEnv;
      } else {
        if ((process.env.NODE_ENV != null) && typeof process.env.NODE_ENV === 'string' && process.env.NODE_ENV.length > 0) {
          currentEnv = process.env.NODE_ENV;
        } else {
          currentEnv = 'development';
        }
        env = global.__fnocEnv = {};
        for (packageName in fnoc) {
          obj = fnoc[packageName];
          if (fnoc.hasOwnProperty(packageName)) {
            env[packageName] = obj;
            if ((obj != null) && (obj[currentEnv] != null)) {
              console.log('got one: ' + packageName);
              env[packageName] = obj[currentEnv];
            }
          }
        }
        return global.__fnocEnv;
      }
    };
    module.exports = global.__fnoc;
  }

}).call(this);
