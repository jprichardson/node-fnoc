// Generated by CoffeeScript 1.3.3
(function() {
  var configs, fs, packpath, path;

  path = require('path');

  fs = require('fs-extra');

  packpath = require('packpath');

  configs = function() {
    var dir, dirs, fnoc, jsonFiles, jsonObj, key, newDir, p, packageDir, paths, stat, _i, _j, _len, _len1;
    dirs = ['./', './config', './conf', "./configs"];
    jsonFiles = [];
    fnoc = {};
    packageDir = packpath.parent();
    for (_i = 0, _len = dirs.length; _i < _len; _i++) {
      dir = dirs[_i];
      newDir = path.join(packageDir, dir);
      if (fs.existsSync(newDir)) {
        paths = fs.readdirSync(newDir);
        for (_j = 0, _len1 = paths.length; _j < _len1; _j++) {
          p = paths[_j];
          if (p === 'env.json') {
            console.log("Can't have config file named 'env.json'");
          } else {
            p = path.join(newDir, p);
            stat = fs.lstatSync(p);
            if (path.extname(p) === '.json' && stat.isFile()) {
              jsonObj = null;
              try {
                jsonObj = JSON.parse(fs.readFileSync(p));
              } catch (error) {
                console.log(error);
                console.log("fnoc: JSON parse error on file " + p);
              }
              key = path.basename(p, '.json');
              fnoc[key] = jsonObj;
            }
          }
        }
      }
    }
    fnoc.env = function() {
      var currentEnv, env, obj, packageName;
      if ((process.env.NODE_ENV != null) && typeof process.env.NODE_ENV === 'string' && process.env.NODE_ENV.length > 0) {
        currentEnv = process.env.NODE_ENV;
      } else {
        currentEnv = 'development';
      }
      env = {};
      for (packageName in fnoc) {
        obj = fnoc[packageName];
        if (fnoc.hasOwnProperty(packageName)) {
          env[packageName] = obj;
          if ((obj != null) && (obj[currentEnv] != null)) {
            env[packageName] = obj[currentEnv];
          }
        }
      }
      return env;
    };
    return fnoc;
  };

  module.exports.configs = configs;

}).call(this);
